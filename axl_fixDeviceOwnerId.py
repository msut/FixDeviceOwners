""" Ultimately, originally built from the Cisco AXL examples using the Zeep SOAP library

Set the Owner User ID on a phone or phones. Conveniently, CallManager will set the "Owner"
field to be "User" from "Anonymous" when populating this field.
Driven by a CSV generated by UnownedPhones.ps1, created from an Uplinx report.
Pass the CSV file in as the first argument.

"""
import sys
import os
import smtplib
import csv

import urllib3
from requests import Session
from requests.auth import HTTPBasicAuth
from requests.sessions import requote_uri

from lxml import etree
from zeep import Client, Settings, Plugin
from zeep.transports import Transport
from zeep.exceptions import Fault

from dotenv import load_dotenv


class MyLoggingPlugin( Plugin ):
    # Cisco's plugin that dumps the SOAP messages.
    def egress( self, envelope, http_headers, operation, binding_options ):
        xml = etree.tostring( envelope, pretty_print = True, encoding = 'unicode')
        print( f'\nRequest\n-------\nHeaders:\n{http_headers}\n\nBody:\n{xml}' )

    def ingress( self, envelope, http_headers, operation ):
        xml = etree.tostring( envelope, pretty_print = True, encoding = 'unicode')
        print( f'\nResponse\n-------\nHeaders:\n{http_headers}\n\nBody:\n{xml}' )


def get_axl_service(debug):
    """initialize the AXL connection and return the service object.

    Keyword arguments:
    debug -- whether to display the SOAP messages
    """
    load_dotenv()
    DEBUG = debug
    WSDL_FILE = 'schema/AXLAPI.wsdl'
    session = Session()
    session.verify = False
    session.auth = HTTPBasicAuth( os.getenv( 'AXL_USERNAME' ), os.getenv( 'AXL_PASSWORD' ) )
    transport = Transport( session = session, timeout = 10 )
    settings = Settings( strict = False, xml_huge_tree = True )
    plugin = [ MyLoggingPlugin() ] if DEBUG else [ ]
    client = Client( WSDL_FILE, settings = settings, transport = transport,
            plugins = plugin )
    service = client.create_service( '{http://www.cisco.com/AXLAPIService/}AXLAPIBinding',
                                    f'https://{os.getenv( "CUCM_ADDRESS" )}:8443/axl/' )
    return service


def set_device_owner(device, owner, service):
    """Set the owner of a device using the AXL service

    Keyword arguments:
    device -- the device name physical device (phone) e.g. SEPDEADBEEF0001
    owner -- the AD username of the owner e.g. ddiloret
    service -- the AXL service object as provided by get_axl_service
    """
    try:
        service.updatePhone(name=device, ownerUserName=owner)
    except:
        print('\x1b[7;31;40m' + '--- ERROR UPDATING OWNER ---' + '\x1b[0m')


def set_device_owners(devices_with_owners, service):
    """Set the owners of a list of devices using the AXL service

    Keyword arguments:
    devices_with_owners -- a list of (device_name, username) tuples
    service -- the AXL service object as provided by get_axl_service
    """
    for device_with_owner in devices_with_owners:
        (device_name, username) = device_with_owner
        print(f'adding {username} as owner of {device_name}')
        set_device_owner(device=device_name, owner=username, service=service)


def parse_phones_to_fix_csv(filename):
# parse a cooked csv into a list of (device_name, username) tuples
    try:
        with open(filename, newline='') as f:
            devices_with_owners = []
            reader = csv.reader(f)
            done_first = False
            for row in reader:
                if not done_first:
                    done_first = True
                    continue
                current_device_with_owner = (row[0], row[1])
                devices_with_owners.append(current_device_with_owner)
            return devices_with_owners
    except BaseException as e:
        print('BaseException:', filename)
    else:
        print(f'{filename} read')


if __name__ == "__main__":
    # ignore cert warnings on CCM
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    service = get_axl_service(False)
    devices_with_owners = parse_phones_to_fix_csv(filename=sys.argv[1])
    set_device_owners(devices_with_owners=devices_with_owners,
        service=service)