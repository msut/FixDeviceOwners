""" Ultimately, originally built from the Cisco AXL examples using the Zeep SOAP library

Set the Owner User ID on a phone or phones. Conveniently, CallManager will set the "Owner"
field to be "User" from "Anonymous" when populating this field.
Driven by a CSV generated by <TBD> created from an Uplinx report.
Pass the CSV file in as the first argument.

"""
import sys

from requests.sessions import requote_uri
import urllib3
import os
import smtplib
import csv

from lxml import etree
from requests import Session
from requests.auth import HTTPBasicAuth
from email.message import EmailMessage

from zeep import Client, Settings, Plugin
from zeep.transports import Transport
from zeep.exceptions import Fault
from dotenv import load_dotenv


# locations of data in uplinx reports
COLUMN_DEVICENAME = 0
COLUMN_MODEL = 0
COLUMN_OWNER = 0
COLUMN_DN = 0
COLUMN_LINENUMBER = 0

# Cisco's plugin that dumps the SOAP messages.
class MyLoggingPlugin( Plugin ):

    def egress( self, envelope, http_headers, operation, binding_options ):
        xml = etree.tostring( envelope, pretty_print = True, encoding = 'unicode')
        print( f'\nRequest\n-------\nHeaders:\n{http_headers}\n\nBody:\n{xml}' )

    def ingress( self, envelope, http_headers, operation ):
        xml = etree.tostring( envelope, pretty_print = True, encoding = 'unicode')
        print( f'\nResponse\n-------\nHeaders:\n{http_headers}\n\nBody:\n{xml}' )


class DeviceFromUplinx:
    def __init__(self, devicename, model, owner, dn, linenumber):
        self.devicename = devicename
        self.model = model
        self.owner = owner
        self.dn = dn
        self.linenumber = linenumber
    def __str__(self):
        return f'devicename={self.devicename};model={self.model};owner={self.owner}:dn={self.dn};linenumber={self.linenumber}'


# initialize the AXL connection and return the service object.
def get_axl_service(debug):
    load_dotenv()
    DEBUG = debug
    WSDL_FILE = 'schema/AXLAPI.wsdl'
    session = Session()
    session.verify = False
    session.auth = HTTPBasicAuth( os.getenv( 'AXL_USERNAME' ), os.getenv( 'AXL_PASSWORD' ) )
    transport = Transport( session = session, timeout = 10 )
    settings = Settings( strict = False, xml_huge_tree = True )
    plugin = [ MyLoggingPlugin() ] if DEBUG else [ ]
    client = Client( WSDL_FILE, settings = settings, transport = transport,
            plugins = plugin )
    service = client.create_service( '{http://www.cisco.com/AXLAPIService/}AXLAPIBinding',
                                    f'https://{os.getenv( "CUCM_ADDRESS" )}:8443/axl/' )
    return service


def set_device_owner(device, owner, service):
    """Set the owner of a device using the AXL service

    Keyword arguments:
    device -- the device name physical device (phone) e.g. SEPDEADBEEF0001
    owner -- the AD username of the owner e.g. ddiloret
    service -- the AXL service object as provided by get_axl_service
    """
    service.updatePhone(name=device, ownerUserName=owner)


def parse_uplinx_csv(filename):
# parse an uplinx csv into a list of DeviceFromUplinx objects
    try:
        with open(filename, 'w', newline='') as f:
            device_list = []
            reader = csv.reader(f)
            done_first = False
            for row in reader:
                if not done_first:
                    done_first = True
                    continue
                current_device = DeviceFromUplinx()
                current_device.devicename = row[COLUMN_DEVICENAME]
                current_device.model = row[COLUMN_MODEL]
                current_device.owner = row[COLUMN_OWNER]
                current_device.dn = row[COLUMN_DN]
                current_device.linenumber = row[COLUMN_LINENUMBER]
                device_list.append(current_device)
            return device_list
    except BaseException as e:
        print('BaseException:', filename)
    else:
        print(f'{filename} read')


if __name__ == "__main__":
    uplinx_devices = parse_uplinx_csv(filename=sys.argv[1])