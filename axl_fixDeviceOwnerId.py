""" Ultimately, originally built from the Cisco AXL examples using the Zeep SOAP library

Set the Owner User ID on a phone or phones.
Driven by a CSV generated by <TBD> created from an Uplinx report.

"""
import sys
import urllib3
import os
import smtplib
import csv

from lxml import etree
from requests import Session
from requests.auth import HTTPBasicAuth
from email.message import EmailMessage

from zeep import Client, Settings, Plugin
from zeep.transports import Transport
from zeep.exceptions import Fault
from dotenv import load_dotenv


# Cisco's plugin that dumps the SOAP messages.
class MyLoggingPlugin( Plugin ):

    def egress( self, envelope, http_headers, operation, binding_options ):
        xml = etree.tostring( envelope, pretty_print = True, encoding = 'unicode')
        print( f'\nRequest\n-------\nHeaders:\n{http_headers}\n\nBody:\n{xml}' )

    def ingress( self, envelope, http_headers, operation ):
        xml = etree.tostring( envelope, pretty_print = True, encoding = 'unicode')
        print( f'\nResponse\n-------\nHeaders:\n{http_headers}\n\nBody:\n{xml}' )


# initialize the AXL connection and return the service object.
def get_axl_service(debug):
    load_dotenv()
    DEBUG = debug
    WSDL_FILE = 'schema/AXLAPI.wsdl'
    session = Session()
    session.verify = False
    session.auth = HTTPBasicAuth( os.getenv( 'AXL_USERNAME' ), os.getenv( 'AXL_PASSWORD' ) )
    transport = Transport( session = session, timeout = 10 )
    settings = Settings( strict = False, xml_huge_tree = True )
    plugin = [ MyLoggingPlugin() ] if DEBUG else [ ]
    client = Client( WSDL_FILE, settings = settings, transport = transport,
            plugins = plugin )
    service = client.create_service( '{http://www.cisco.com/AXLAPIService/}AXLAPIBinding',
                                    f'https://{os.getenv( "CUCM_ADDRESS" )}:8443/axl/' )
    return service


# inp
def get_csv(filename):
    try:
        with open(filename, 'w', newline='') as f:
            reader = csv.reader(f)
            for row in reader:
                device = row[0]
                username = row[1]
    except BaseException as e:
        print('BaseException:', filename)
    else:
        print(f'{filename} read')


if __name__ == "__main__":
    get_csv(filename='cfwd.csv')